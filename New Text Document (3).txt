/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package recursion;

import java.util.ArrayList;
import java.util.Scanner;

/**
 *^
 * @author Sai Kumar Uppala
 */
public class RecursionDriver {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
         Recursion recursion = new Recursion();
         Scanner scan=new Scanner(System.in);
        
        String oc= "5";
        System.out.println("Enter number: "+oc);
        int ch=0;
       
        if(oc.matches("[0-9]+")||(oc.charAt(0)=='+' && oc.lastIndexOf("+") == 0 &&(oc.substring(1).matches("[0-9]+")))){
             ch=Integer.parseInt(oc);
         
        System.out.println("Sum: "+recursion.sumOfOdd(ch));
        }
        else{
            
            System.out.println("Enter valid number"); 
        }
          
        
        
        oc = "Adam,Bob,Charlie,Effie,David";
        System.out.println("\nEnter String : \n"+oc);
        ArrayList<Student> al = new ArrayList<>();
        ArrayList<ArrayList<Student>> t = new ArrayList<>();
        ArrayList<ArrayList<Student>> result = new ArrayList<>();
        String[] p = oc.split(",");
        for (String b : p) {
            Student st = new Student(b);
            al.add(st);
        }
        t = recursion.organizeSeats(al);
        System.out.println("\n");
        System.out.println("David and charlie are next to each other: " + t.size());
        System.out.println("\n");
        
        for (ArrayList<Student> as : t) {
            String s = "";
            for (Student str : as) {

                System.out.print(s+ str.getFname());
                s = ",";
            }
            System.out.println("");
        }

        System.out.println("\n");
        al.clear();
        String s1= "charlie,david";
        String[] str1=s1.split(",");
         System.out.println("\n"+str1[0]+" and "+str1[1]+" are not next to each other: " +"\n");
        
        
        if(str1.length <= 1){
          System.out.println("please check the arrangement");
        }else{
            
              
        for (int i = 0; i < p.length; i++) {
            for (int j = 0; j < str1.length; j++) {
                if (p[i].toLowerCase().equals(str1[j].toLowerCase())) {
                    p[i] = "." + p[i];
                }

            }

        }
         for(String b:p){
          Student st=new Student(b);
        al.add(st);
        }
               
            result = recursion.organizeSeats1(al);
        for (ArrayList<Student> as : result) {
            String c = "";
            for (Student str : as) {

                System.out.print(c + str.getFname());
                c = ",";
            }
            System.out.println("");
        }
        }
        
        System.out.println("\n"+str1[0]+" and "+str1[1]+" are not next to each other: " + result.size()+"\n");
        
        try{
            String expression="((2+4)*(3*2)-(2/4)+(9%4))";
            System.out.println("Expression:"+expression);
        int art=recursion.evaluateExpression(expression);
            System.out.println("Result For The Given Expression: "+art);
        }catch(ArithmeticException e){
            System.out.println("please check your expression (**divide by zero exception**)");
        }catch(Exception e){
            System.out.println("please check the expression");
        } 
        
    }
}



var expect = require('chai').expect;

var Meme = require('../models/estimate.js');

describe('estimate', function() {
    it('should be invalid if name is empty', function(done) {
        var m = new Estimate();
 
        m.validate(function(err) {
            expect(err.errors.name).to.exist;
            done();
        });
    });
});